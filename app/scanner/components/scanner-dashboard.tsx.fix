"use client";

import React, { useEffect, useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Button } from '@/components/ui/button';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Badge } from '@/components/ui/badge';
import { useToast } from '@/components/ui/use-toast';
import { Loader2, RefreshCw, ArrowUpRight, ArrowDownRight, MinusCircle, BookmarkPlus, AlertTriangle, BarChart3, TrendingUp, TrendingDown, CheckCircle2, Link } from 'lucide-react';
import ScannerFilters, { ScannerFilterValues, defaultFilters } from '@/components/scanner/scanner-filters';
import ScannerControls from '@/components/scanner/scanner-controls';
import { TickerLimitSettings } from '@/components/scanner/ticker-limit-settings';
import { SCANNER_CONFIG } from '@/lib/config';
import { fetchScannerResults, fetchWatchlist, addToWatchlist } from '@/lib/api';
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';

// Types
interface TradeSetup {
  ticker: string;
  date: string;
  timestamp: number;
  setup_type: string;
  strength: number;
  entry_price: number;
  stop_loss: number;
  target_price: number;
  risk_reward_ratio: number;
  emaTrend?: string;
  pcr?: number;
  rsi?: number;
  iv?: number;
  gamma?: number;
  vanna?: number;
  charm?: number;
  stoch_rsi?: number;
}

interface ScannerResult {
  [ticker: string]: TradeSetup | null;
}

interface MarketSummary {
  sentiment: string;
  volatility: string;
  gexAggregate: number;
  pcrAggregate: number;
}

interface FilteredSetup extends TradeSetup {
  matchedFilters?: {
    pcr: boolean;
    rsi: boolean;
    stochRsiInRange: boolean;
    iv: boolean;
    gex: boolean;
    gamma: boolean;
    vanna: boolean;
    charm: boolean;
  };
  matchesAllFilters?: boolean;
}

interface EnhancedScannerResult {
  [ticker: string]: FilteredSetup | null;
}

export function ScannerDashboard() {
  // State
  const [tickers, setTickers] = useState<string[]>([]);
  const [selectedTicker, setSelectedTicker] = useState<string>('');
  const [setupType, setSetupType] = useState<string>('all');
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [results, setResults] = useState<ScannerResult>({});
  const [marketSummary, setMarketSummary] = useState<MarketSummary | null>(null);
  const [searchTerm, setSearchTerm] = useState<string>('');
  const [tickerLimit, setTickerLimit] = useState<number>(SCANNER_CONFIG.DEFAULT_TICKER_LIMIT);
  const [filters, setFilters] = useState<ScannerFilterValues>(defaultFilters);
  const [dataSource, setDataSource] = useState<string>('');
  const [isFilterApplied, setIsFilterApplied] = useState<boolean>(false);
  const [watchlistItems, setWatchlistItems] = useState<string[]>([]);
  const [isAddingToWatchlist, setIsAddingToWatchlist] = useState<boolean>(false);
  const [activeWatchlistItem, setActiveWatchlistItem] = useState<{ticker: string, setup: TradeSetup | null} | null>(null);
  const [watchlistNote, setWatchlistNote] = useState<string>('');
  const [dialogOpen, setDialogOpen] = useState<boolean>(false);
  const { toast } = useToast();

  // Initialize data collection when component mounts
  useEffect(() => {
    // Initialize data collection
    fetch('/api/init')
      .then(res => res.json())
      .then(data => {
        console.log('Data collection initialized:', data);
      })
      .catch(error => {
        console.error('Failed to initialize data collection:', error);
        toast({
          title: 'Error',
          description: 'Failed to initialize data collection',
          variant: 'destructive',
        });
      });

    // Fetch available tickers
    fetchTickers();

    // Fetch watchlist items to know which tickers are already in the watchlist
    fetchWatchlistItems();
  }, []);

  // Fetch watchlist items to mark which tickers are already in the watchlist
  const fetchWatchlistItems = async () => {
    try {
      const response = await fetchWatchlist();
      if (response && Array.isArray(response.items)) {
        // Extract just the symbols to simplify checking
        const symbols = response.items.map((item: any) => item.symbol);
        setWatchlistItems(symbols);
      }
    } catch (error) {
      console.error('Error fetching watchlist items:', error);
    }
  };

  // Fetch tickers from API
  const fetchTickers = async () => {
    try {
      const response = await fetch('/api/tickers');
      const data = await response.json();

      if (data.tickers && data.tickers.length > 0) {
        setTickers(data.tickers);
        setSelectedTicker('all');
      }
    } catch (error) {
      console.error('Failed to fetch tickers:', error);
      toast({
        title: 'Error',
        description: 'Failed to fetch tickers',
        variant: 'destructive',
      });
    }
  };

  // Run the scanner with all parameters
  const runScanner = async () => {
    setIsLoading(true);

    try {
      // Build scan options with all parameters
      const scanOptions = {
        symbol: selectedTicker !== 'all' ? selectedTicker : undefined,
        setupType: setupType !== 'all' ? setupType : undefined,
        refresh: true,
        limit: tickerLimit,
        // Apply advanced filters if filter has been applied
        filters: isFilterApplied ? {
          pcr: filters.pcr,
          rsi: filters.rsi,
          stochasticRsi: filters.stochasticRsi,
          iv: filters.iv,
          gex: filters.gex,
          includeGamma: filters.includeGamma,
          includeVanna: filters.includeVanna,
          includeCharm: filters.includeCharm
        } : undefined
      };

      const data = await fetchScannerResults(scanOptions);

      if (selectedTicker && selectedTicker !== 'all') {
        // Single ticker scan
        setResults({ [selectedTicker]: data.setup });
      } else {
        // All tickers scan - transform to expected format
        const formattedResults: ScannerResult = {};
        if (data.results && Array.isArray(data.results)) {
          data.results.forEach((result: any) => {
            formattedResults[result.symbol] = {
              ticker: result.symbol,
              setup_type: result.setupType,
              strength: parseStrengthToNumber(result.setupStrength),
              entry_price: result.entryPrice,
              stop_loss: result.stopLoss,
              target_price: result.targetPrice,
              risk_reward_ratio: result.riskRewardRatio,
              date: new Date().toISOString().split('T')[0],
              timestamp: Date.now(),
              emaTrend: result.emaTrend,
              pcr: result.pcr,
              rsi: result.rsi,
              iv: result.iv,
              gamma: result.gamma,
              vanna: result.vanna,
              charm: result.charm
            };
          });
        }
        setResults(formattedResults);

        // Set market summary if available
        if (data.marketSummary) {
          setMarketSummary(data.marketSummary);
        }

        // Set data source if available
        if (data.dataSource) {
          setDataSource(data.dataSource);
        }

        // If results were filtered client-side, show a notification
        if (data.filteredClientSide) {
          toast({
            title: 'Client-side Filtering',
            description: 'Some filters were applied on the client side because the API does not fully support them yet.',
            variant: 'default',
          });
        }
      }

      toast({
        title: 'Scan Complete',
        description: 'Scanner analysis completed successfully',
      });
    } catch (error) {
      console.error('Scanner error:', error);
      toast({
        title: 'Error',
        description: 'Failed to run scanner',
        variant: 'destructive',
      });
    } finally {
      setIsLoading(false);
    }
  };

  // Helper function to convert setup strength text to number
  const parseStrengthToNumber = (strength: string): number => {
    switch(strength) {
      case 'strong': return 85;
      case 'moderate': return 70;
      case 'weak': return 55;
      default: return 50;
    }
  };

  // Get setup color and icon
  const getSetupProperties = (type: string) => {
    switch (type) {
      case 'bullish':
        return {
          color: 'bg-green-500',
          textColor: 'text-green-500',
          icon: <ArrowUpRight className="h-5 w-5" />
        };
      case 'bearish':
        return {
          color: 'bg-red-500',
          textColor: 'text-red-500',
          icon: <ArrowDownRight className="h-5 w-5" />
        };
      case 'neutral':
        return {
          color: 'bg-yellow-500',
          textColor: 'text-yellow-500',
          icon: <MinusCircle className="h-5 w-5" />
        };
      default:
        return {
          color: 'bg-gray-500',
          textColor: 'text-gray-500',
          icon: null
        };
    }
  };

  // Apply advanced filters to results
  const applyFilters = (newFilters: ScannerFilterValues) => {
    setFilters(newFilters);
    setSetupType(newFilters.setupType); // Sync the setup type filter
    setIsFilterApplied(true);

    // If we have results, we can apply filters immediately
    if (Object.keys(results).length > 0) {
      toast({
        title: 'Filters Applied',
        description: 'Scanner filters have been applied to results',
      });
    } else {
      // If no results yet, prompt to run the scanner
      toast({
        title: 'No Results Available',
        description: 'Please run the scanner to see filtered results',
      });
    }
  };

  // Handle ticker limit changes
  const handleLimitChange = (limit: number) => {
    setTickerLimit(limit);
  };

  // Open watchlist dialog
  const openWatchlistDialog = (ticker: string, setup: TradeSetup | null) => {
    if (!setup) return;

    setActiveWatchlistItem({ ticker, setup });
    setWatchlistNote('');
    setDialogOpen(true);
  };

  // Add to watchlist functionality
  const handleAddToWatchlist = async () => {
    if (!activeWatchlistItem || !activeWatchlistItem.setup) {
      setDialogOpen(false);
      return;
    }

    const { ticker, setup } = activeWatchlistItem;
    setIsAddingToWatchlist(true);

    try {
      const watchlistItem = {
        symbol: ticker,
        price: setup.entry_price,
        setupType: setup.setup_type,
        entryTarget: setup.entry_price,
        stopLoss: setup.stop_loss,
        targetPrice: setup.target_price,
        riskReward: setup.risk_reward_ratio,
        strength: setup.strength,
        date: new Date().toISOString().split('T')[0],
        notes: watchlistNote.trim() || undefined,  // Only include if there's a note
      };

      const result = await addToWatchlist(watchlistItem);

      if (result.success) {
        // Add the ticker to our local watchlist items
        if (!watchlistItems.includes(ticker)) {
          setWatchlistItems([...watchlistItems, ticker]);
        }

        toast({
          title: 'Added to Watchlist',
          description: (
            <div className="flex flex-col space-y-2">
              <p>{ticker} has been added to your watchlist</p>
              <a
                href="/watchlist"
                className="flex items-center text-sm font-medium text-blue-500 hover:text-blue-600"
              >
                <Link className="h-4 w-4 mr-1" />
                View Watchlist
              </a>
            </div>
          ),
        });
      } else {
        throw new Error(result.error || 'Failed to add to watchlist');
      }
    } catch (error) {
      console.error('Error adding to watchlist:', error);
      toast({
        title: 'Error',
        description: 'Failed to add to watchlist',
        variant: 'destructive',
      });
    } finally {
      setIsAddingToWatchlist(false);
      setDialogOpen(false);
    }
  };

  // Search functionality
  const handleSearch = (searchText: string) => {
    setSearchTerm(searchText);
  };

  // Filter results based on all filters with enhanced match tracking
  const getFilteredResults = (): EnhancedScannerResult => {
    let filtered = { ...results } as EnhancedScannerResult;

    // First apply basic search filter
    if (searchTerm) {
      filtered = Object.entries(filtered).reduce((acc, [ticker, setup]) => {
        if (ticker.toLowerCase().includes(searchTerm.toLowerCase())) {
          acc[ticker] = setup;
        }
        return acc;
      }, {} as EnhancedScannerResult);
    }

    // Apply setup type filter
    if (filters.setupType !== 'all') {
      filtered = Object.entries(filtered).reduce((acc, [ticker, setup]) => {
        if (setup && setup.setup_type === filters.setupType) {
          acc[ticker] = setup;
        }
        return acc;
      }, {} as EnhancedScannerResult);
    }

    // Apply advanced filters if they are set and the filter is applied
    if (isFilterApplied) {
      filtered = Object.entries(filtered).reduce((acc, [ticker, setup]) => {
        if (!setup) return acc;

        const enhancedSetup = setup as FilteredSetup;
        enhancedSetup.matchedFilters = {
          pcr: false,
          rsi: false,
          stochRsiInRange: false,
          iv: false,
          gex: false,
          gamma: false,
          vanna: false,
          charm: false
        };

        // PCR filter
        const pcrInRange = setup.pcr
          ? setup.pcr >= filters.pcr.min && setup.pcr <= filters.pcr.max
          : true;
        enhancedSetup.matchedFilters.pcr = pcrInRange;

        // RSI filter
        const rsiInRange = setup.rsi
          ? setup.rsi >= filters.rsi.min && setup.rsi <= filters.rsi.max
          : true;
        enhancedSetup.matchedFilters.rsi = rsiInRange;

        // Stochastic RSI filter - we don't have this value directly but
        // we'll check it if it exists on the setup
        const stochRsiInRange = setup.stoch_rsi
          ? setup.stoch_rsi >= filters.stochasticRsi.min && setup.stoch_rsi <= filters.stochasticRsi.max
          : true;
        enhancedSetup.matchedFilters.stochRsiInRange = stochRsiInRange;

        // IV filter
        const ivInRange = setup.iv
          ? setup.iv >= filters.iv.min && setup.iv <= filters.iv.max
          : true;
        enhancedSetup.matchedFilters.iv = ivInRange;

        // GEX filter - simplified since we don't have the raw GEX value
        let gexMatches = true;
        if (filters.gex !== 'all') {
          // This is a simplification - in a real app, we'd have the actual GEX value
          gexMatches = filters.gex === 'positive' && setup.setup_type === 'bullish' ||
                       filters.gex === 'negative' && setup.setup_type === 'bearish' ||
                       filters.gex === 'neutral' && setup.setup_type === 'neutral';
        }
        enhancedSetup.matchedFilters.gex = gexMatches;

        // Greek filters - only if they're enabled
        const gammaMatches = !filters.includeGamma || (setup.gamma !== undefined);
        enhancedSetup.matchedFilters.gamma = gammaMatches;

        const vannaMatches = !filters.includeVanna || (setup.vanna !== undefined);
        enhancedSetup.matchedFilters.vanna = vannaMatches;

        const charmMatches = !filters.includeCharm || (setup.charm !== undefined);
        enhancedSetup.matchedFilters.charm = charmMatches;

        // Include setup only if it matches all filters
        if (pcrInRange && rsiInRange && stochRsiInRange && ivInRange &&
            gexMatches && gammaMatches && vannaMatches && charmMatches) {
          enhancedSetup.matchesAllFilters = true;
          acc[ticker] = enhancedSetup;
        }

        return acc;
      }, {} as EnhancedScannerResult);
    }

    return filtered;
  };

  const filteredResults = getFilteredResults();
  const totalResults = Object.keys(results).length;
  const filteredCount = Object.keys(filteredResults).length;

  // Render market sentiment indicator
  const renderMarketSentiment = () => {
    if (!marketSummary) return null;

    const getSentimentColor = () => {
      if (marketSummary.sentiment.includes('Bullish')) {
        return 'text-green-500';
      } else if (marketSummary.sentiment.includes('Bearish')) {
        return 'text-red-500';
      } else {
        return 'text-yellow-500';
      }
    };

    const getSentimentIcon = () => {
      if (marketSummary.sentiment.includes('Bullish')) {
        return <TrendingUp className="h-5 w-5" />;
      } else if (marketSummary.sentiment.includes('Bearish')) {
        return <TrendingDown className="h-5 w-5" />;
      } else {
        return <MinusCircle className="h-5 w-5" />;
      }
    };

    // Calculate setup counts and percentages for visualization
    const bullishCount = Object.keys(filteredResults).filter(t => results[t]?.setup_type === 'bullish').length;
    const bearishCount = Object.keys(filteredResults).filter(t => results[t]?.setup_type === 'bearish').length;
    const neutralCount = Object.keys(filteredResults).filter(t => results[t]?.setup_type === 'neutral').length;
    const totalSetups = bullishCount + bearishCount + neutralCount;

    // Calculate percentages (handle division by zero)
    const bullishPercentage = totalSetups > 0 ? (bullishCount / totalSetups) * 100 : 0;
    const bearishPercentage = totalSetups > 0 ? (bearishCount / totalSetups) * 100 : 0;
    const neutralPercentage = totalSetups > 0 ? (neutralCount / totalSetups) * 100 : 0;

    return (
      <Card className="mb-6">
        <CardHeader className="pb-2">
          <CardTitle className="text-lg">Market Summary</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {/* Main market metrics in grid layout */}
            <div className="grid grid-cols-2 gap-4">
              <div className="space-y-2">
                <div className="text-sm text-muted-foreground">Overall Sentiment</div>
                <div className={`font-medium flex items-center ${getSentimentColor()}`}>
                  {getSentimentIcon()}
                  <span className="ml-1">{marketSummary.sentiment}</span>
                </div>
              </div>

              <div className="space-y-2">
                <div className="text-sm text-muted-foreground">Market Volatility</div>
                <div className="font-medium">
                  {marketSummary.volatility}
                </div>
              </div>

              <div className="space-y-2">
                <div className="text-sm text-muted-foreground">Put-Call Ratio</div>
                <div className="font-medium">
                  {marketSummary.pcrAggregate.toFixed(2)}
                </div>
              </div>

              <div className="space-y-2">
                <div className="text-sm text-muted-foreground">GEX ($MM)</div>
                <div className={`font-medium ${marketSummary.gexAggregate > 0 ? 'text-green-500' : 'text-red-500'}`}>
                  {(marketSummary.gexAggregate / 1000000).toFixed(1)}
                </div>
              </div>
            </div>

            {/* Setup distribution section */}
            <div className="space-y-4">
              <div className="space-y-2">
                <div className="text-sm text-muted-foreground flex items-center">
                  <BarChart3 className="h-4 w-4 mr-1" />
                  <span>Setup Distribution</span>
                </div>

                {/* Setup counts with badges */}
                <div className="flex flex-wrap gap-2">
                  {totalSetups > 0 ? (
                    <>
                      <Badge variant="outline" className="bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-300 border-green-200 dark:border-green-800">
                        <ArrowUpRight className="h-3.5 w-3.5 mr-1" />
                        Bullish: {bullishCount}
                      </Badge>
                      <Badge variant="outline" className="bg-red-100 dark:bg-red-900 text-red-800 dark:text-red-300 border-red-200 dark:border-red-800">
                        <ArrowDownRight className="h-3.5 w-3.5 mr-1" />
                        Bearish: {bearishCount}
                      </Badge>
                      <Badge variant="outline" className="bg-yellow-100 dark:bg-yellow-900 text-yellow-800 dark:text-yellow-300 border-yellow-200 dark:border-yellow-800">
                        <MinusCircle className="h-3.5 w-3.5 mr-1" />
                        Neutral: {neutralCount}
                      </Badge>
                    </>
                  ) : (
                    <span className="text-sm text-muted-foreground">No setups detected</span>
                  )}
                </div>

                {/* Setup distribution progress bar */}
                {totalSetups > 0 && (
                  <div className="w-full h-2.5 bg-gray-200 rounded-full dark:bg-gray-700 overflow-hidden flex">
                    {bullishPercentage > 0 && (
                      <div
                        className="h-full bg-green-500"
                        style={{ width: `${bullishPercentage}%` }}
                        title={`Bullish: ${bullishCount} (${bullishPercentage.toFixed(1)}%)`}
                      ></div>
                    )}
                    {bearishPercentage > 0 && (
                      <div
                        className="h-full bg-red-500"
                        style={{ width: `${bearishPercentage}%` }}
                        title={`Bearish: ${bearishCount} (${bearishPercentage.toFixed(1)}%)`}
                      ></div>
                    )}
                    {neutralPercentage > 0 && (
                      <div
                        className="h-full bg-yellow-500"
                        style={{ width: `${neutralPercentage}%` }}
                        title={`Neutral: ${neutralCount} (${neutralPercentage.toFixed(1)}%)`}
                      ></div>
                    )}
                  </div>
                )}

                {/* Percentage legend */}
                {totalSetups > 0 && (
                  <div className="flex justify-between text-xs text-muted-foreground">
                    <span>Bullish: {bullishPercentage.toFixed(1)}%</span>
                    <span>Bearish: {bearishPercentage.toFixed(1)}%</span>
                    <span>Neutral: {neutralPercentage.toFixed(1)}%</span>
                  </div>
                )}
              </div>
            </div>
          </div>
        </CardContent>
      </Card>
    );
  };

  // Function to check if a ticker is already in watchlist
  const isInWatchlist = (ticker: string) => {
    return watchlistItems.includes(ticker);
  };

  return (
    <div className="space-y-6">
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <div className="md:col-span-2">
          <Card>
            <CardHeader>
              <CardTitle>Options-Technical Hybrid Scanner</CardTitle>
              <CardDescription>
                Scan for trading opportunities using options and technical analysis
              </CardDescription>
            </CardHeader>
            <CardContent>
              <ScannerControls
                onSearch={handleSearch}
                onRefresh={runScanner}
                totalResults={totalResults}
                filteredResults={filteredCount}
                loading={isLoading}
                dataSource={dataSource}
              />

              <div className="flex flex-col md:flex-row gap-4 items-end my-6">
                <div className="w-full md:w-1/3">
                  <label className="block text-sm font-medium mb-1">Ticker</label>
                  <Select value={selectedTicker} onValueChange={setSelectedTicker}>
                    <SelectTrigger>
                      <SelectValue placeholder="Select ticker" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="all">All Tickers</SelectItem>
                      {tickers.map(ticker => (
                        <SelectItem key={ticker} value={ticker}>{ticker}</SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>

                <div className="w-full md:w-1/3">
                  <label className="block text-sm font-medium mb-1">Setup Type</label>
                  <Select value={setupType} onValueChange={setSetupType}>
                    <SelectTrigger>
                      <SelectValue placeholder="Select setup type" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="all">All Setups</SelectItem>
                      <SelectItem value="bullish">Bullish</SelectItem>
                      <SelectItem value="bearish">Bearish</SelectItem>
                      <SelectItem value="neutral">Neutral</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <Button onClick={runScanner} disabled={isLoading} className="w-full md:w-auto">
                  {isLoading ? (
                    <>
                      <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                      Scanning...
                    </>
                  ) : (
                    <>
                      <RefreshCw className="h-4 w-4 mr-2" />
                      Run Scanner
                    </>
                  )}
                </Button>
              </div>

              {marketSummary && renderMarketSentiment()}

              {dataSource.includes('mock') && (
                <div className="mb-4 p-2 bg-amber-50 dark:bg-amber-950 border border-amber-200 dark:border-amber-800 rounded-md flex items-center">
                  <AlertTriangle className="h-4 w-4 text-amber-500 mr-2" />
                  <span className="text-sm text-amber-800 dark:text-amber-300">
                    Using simulated data for demonstration purposes
                  </span>
                </div>
              )}

              <Tabs defaultValue="grid" className="w-full">
                <TabsList className="mb-4">
                  <TabsTrigger value="grid">Grid View</TabsTrigger>
                  <TabsTrigger value="table">Table View</TabsTrigger>
                </TabsList>

                <TabsContent value="grid" className="space-y-4">
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                    {Object.entries(filteredResults).map(([ticker, setup]) => {
                      const matchesAllFilters = isFilterApplied && setup && (setup as FilteredSetup).matchesAllFilters;
                      return (
                        <Card
                          key={ticker}
                          className={`overflow-hidden transition-all duration-300
                            ${setup ? 'border-l-4 ' + getSetupProperties(setup.setup_type).color : ''}
                            ${matchesAllFilters ? 'shadow-lg ring-2 ring-blue-400 dark:ring-blue-600' : ''}
                            ${(setup && setup.strength >= 80 && matchesAllFilters) ? 'bg-blue-50 dark:bg-blue-950/30' : ''}
                            ${isInWatchlist(ticker) ? 'border-r-4 border-r-blue-400 dark:border-r-blue-600' : ''}
                          `}
                        >
                          <CardHeader className="pb-2">
                            <div className="flex justify-between items-center">
                              <div className="flex items-center gap-2">
                                <CardTitle className={`text-lg ${isInWatchlist(ticker) ? 'flex items-center' : ''}`}>
                                  {ticker}
                                  {isInWatchlist(ticker) && (
                                    <CheckCircle2 className="h-4 w-4 ml-1 text-blue-600 dark:text-blue-400" />
                                  )}
                                </CardTitle>
                                {isFilterApplied && matchesAllFilters && (
                                  <Badge className="bg-blue-500 hover:bg-blue-600" title="Matches all filter criteria">
                                    Perfect Match
                                  </Badge>
                                )}
                                {setup && setup.strength >= 80 && matchesAllFilters && (
                                  <Badge className="bg-purple-500 hover:bg-purple-600" title="High strength and matches all filters">
                                    Top Match
                                  </Badge>
                                )}
                                {isInWatchlist(ticker) && (
                                  <Badge variant="outline" className="bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-300 border-blue-200 dark:border-blue-800">
                                    In Watchlist
                                  </Badge>
                                )}
                              </div>
                              <div className="flex items-center gap-2">
                                {setup && (
                                  <Badge variant="outline" className={getSetupProperties(setup.setup_type).textColor}>
                                    {getSetupProperties(setup.setup_type).icon}
                                    <span className="ml-1 capitalize">{setup.setup_type}</span>
                                  </Badge>
                                )}
                                {setup && (
                                  <Button
                                    variant={isInWatchlist(ticker) ? "secondary" : "ghost"}
                                    size="icon"
                                    onClick={() => openWatchlistDialog(ticker, setup)}
                                    title={isInWatchlist(ticker)
                                      ? "Already in watchlist - click to update"
                                      : "Add to watchlist"}
                                    className={isInWatchlist(ticker) ? "bg-blue-100 dark:bg-blue-900" : ""}
                                    disabled={isAddingToWatchlist}
                                  >
                                    {isInWatchlist(ticker)
                                      ? <CheckCircle2 className="h-4 w-4 text-blue-600 dark:text-blue-400" />
                                      : <BookmarkPlus className="h-4 w-4" />}
                                  </Button>
                                )}
                              </div>
                            </div>
                            {isFilterApplied && setup && (setup as FilteredSetup).matchedFilters && (
                              <div className="flex flex-wrap gap-1 mt-2">
                                {(setup as FilteredSetup).matchedFilters?.pcr && (
                                  <Badge variant="outline" className="text-xs bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-300">
                                    PCR
                                  </Badge>
                                )}
                                {(setup as FilteredSetup).matchedFilters?.rsi && (
                                  <Badge variant="outline" className="text-xs bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-300">
                                    RSI
                                  </Badge>
                                )}
                                {(setup as FilteredSetup).matchedFilters?.iv && (
                                  <Badge variant="outline" className="text-xs bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-300">
                                    IV
                                  </Badge>
                                )}
                                {(setup as FilteredSetup).matchedFilters?.gex && filters.gex !== 'all' && (
                                  <Badge variant="outline" className="text-xs bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-300">
                                    GEX
                                  </Badge>
                                )}
                                {filters.includeGamma && (setup as FilteredSetup).matchedFilters?.gamma && (
                                  <Badge variant="outline" className="text-xs bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-300">
                                    Gamma
                                  </Badge>
                                )}
                                {filters.includeVanna && (setup as FilteredSetup).matchedFilters?.vanna && (
                                  <Badge variant="outline" className="text-xs bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-300">
                                    Vanna
                                  </Badge>
                                )}
                                {filters.includeCharm && (setup as FilteredSetup).matchedFilters?.charm && (
                                  <Badge variant="outline" className="text-xs bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-300">
                                    Charm
                                  </Badge>
                                )}
                              </div>
                            )}
                          </CardHeader>
                          <CardContent className="pt-0">
                          {setup ? (
                            <div className="space-y-2 text-sm">
                              <div className="flex justify-between">
                                <span className="text-muted-foreground">Entry:</span>
                                <span className="font-medium">${setup.entry_price.toFixed(2)}</span>
                              </div>
                              <div className="flex justify-between">
                                <span className="text-muted-foreground">Target:</span>
                                <span className="font-medium">${setup.target_price.toFixed(2)}</span>
                              </div>
                              <div className="flex justify-between">
                                <span className="text-muted-foreground">Stop Loss:</span>
                                <span className="font-medium">${setup.stop_loss.toFixed(2)}</span>
                              </div>
                              <div className="flex justify-between">
                                <span className="text-muted-foreground">Risk/Reward:</span>
                                <span className="font-medium">{setup.risk_reward_ratio.toFixed(2)}</span>
                              </div>
                              {setup.emaTrend && (
                                <div className="flex justify-between">
                                  <span className="text-muted-foreground">EMA Trend:</span>
                                  <span className="font-medium">{setup.emaTrend}</span>
                                </div>
                              )}
                              {setup.pcr !== undefined && (
                                <div className="flex justify-between">
                                  <span className="text-muted-foreground">PCR:</span>
                                  <span className="font-medium">{setup.pcr.toFixed(2)}</span>
                                </div>
                              )}
                              {setup.rsi !== undefined && (
                                <div className="flex justify-between">
                                  <span className="text-muted-foreground">RSI:</span>
                                  <span className="font-medium">{setup.rsi.toFixed(1)}</span>
                                </div>
                              )}
                              {filters.includeGamma && setup.gamma !== undefined && (
                                <div className="flex justify-between">
                                  <span className="text-muted-foreground">Gamma:</span>
                                  <span className="font-medium">{setup.gamma.toFixed(4)}</span>
                                </div>
                              )}
                              {filters.includeVanna && setup.vanna !== undefined && (
                                <div className="flex justify-between">
                                  <span className="text-muted-foreground">Vanna:</span>
                                  <span className="font-medium">{setup.vanna.toFixed(4)}</span>
                                </div>
                              )}
                              {filters.includeCharm && setup.charm !== undefined && (
                                <div className="flex justify-between">
                                  <span className="text-muted-foreground">Charm:</span>
                                  <span className="font-medium">{setup.charm.toFixed(4)}</span>
                                </div>
                              )}
                              <div className="flex justify-between items-center">
                                <span className="text-muted-foreground">Strength:</span>
                                <div className="flex items-center gap-2">
                                  <div className="w-24 bg-gray-200 rounded-full h-2.5 dark:bg-gray-700 relative group">
                                    <div
                                      className={`h-2.5 rounded-full ${setup.strength >= 80 ? 'bg-green-500' : setup.strength >= 65 ? 'bg-yellow-500' : 'bg-red-500'}`}
                                      style={{ width: `${setup.strength}%` }}
                                    ></div>
                                    <div className="absolute inset-0 opacity-0 group-hover:opacity-100 transition-opacity duration-200 flex items-center justify-center">
                                      <span className="text-xs bg-black bg-opacity-70 text-white px-1 rounded">
                                        {setup.strength}%
                                      </span>
                                    </div>
                                  </div>
                                  <span className={`text-xs font-semibold ${
                                    setup.strength >= 80 ? 'text-green-600 dark:text-green-400' :
                                    setup.strength >= 65 ? 'text-yellow-600 dark:text-yellow-400' :
                                    'text-red-600 dark:text-red-400'
                                  }`}>
                                    {setup.strength >= 80 ? 'Strong' :
                                     setup.strength >= 65 ? 'Moderate' :
                                     'Weak'}
                                  </span>
                                </div>
                              </div>
                            </div>
                          ) : (
                            <div className="py-4 text-center text-muted-foreground">
                              No setup detected
                            </div>
                          )}
                        </CardContent>
                        </Card>
                      );
                    })}

                    {Object.keys(filteredResults).length === 0 && (
                      <div className="col-span-3 py-12 text-center text-muted-foreground">
                        No results found. Try running the scanner or adjusting your filters.
                      </div>
                    )}
                  </div>
                </TabsContent>

                <TabsContent value="table">
                  <div className="border rounded-lg overflow-hidden">
                    <table className="min-w-full divide-y divide-gray-200">
                      <thead className="bg-gray-50 dark:bg-gray-800">
                        <tr>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Ticker</th>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Setup</th>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Entry</th>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Target</th>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Stop Loss</th>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">R/R</th>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">PCR</th>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">RSI</th>
                          {filters.includeGamma && (
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Gamma</th>
                          )}
                          {filters.includeVanna && (
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Vanna</th>
                          )}
                          {filters.includeCharm && (
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Charm</th>
                          )}
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Strength</th>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Action</th>
                        </tr>
                      </thead>
                      <tbody className="bg-white dark:bg-gray-900 divide-y divide-gray-200 dark:divide-gray-800">
                        {Object.entries(filteredResults).map(([ticker, setup]) => (
                          <tr key={ticker} className={`
                            ${isFilterApplied && setup && (setup as FilteredSetup).matchesAllFilters ? 'bg-blue-50 dark:bg-blue-950/30' : ''}
                            ${(setup && setup.strength >= 80 && (setup as FilteredSetup).matchesAllFilters) ? 'border-l-4 border-purple-500' : ''}
                            ${isInWatchlist(ticker) ? 'border-r-4 border-r-blue-400 dark:border-r-blue-600' : ''}
                          `}>
                            <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                              <div className="flex items-center gap-2">
                                <span className="flex items-center">
                                  {ticker}
                                  {isInWatchlist(ticker) && (
                                    <CheckCircle2 className="h-4 w-4 ml-1 text-blue-600 dark:text-blue-400" />
                                  )}
                                </span>
                                {isFilterApplied && setup && (setup as FilteredSetup).matchesAllFilters && (
                                  <Badge className="bg-blue-500 hover:bg-blue-600" title="Matches all filter criteria">
                                    Match
                                  </Badge>
                                )}
                                {setup && setup.strength >= 80 && (setup as FilteredSetup).matchesAllFilters && (
                                  <Badge className="bg-purple-500 hover:bg-purple-600" title="High strength and matches all filters">
                                    Top
                                  </Badge>
                                )}
                                {isInWatchlist(ticker) && (
                                  <Badge variant="outline" className="bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-300 border-blue-200 dark:border-blue-800">
                                    Watchlist
                                  </Badge>
                                )}
                              </div>
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm">
                              {setup ? (
                                <Badge variant="outline" className={getSetupProperties(setup.setup_type).textColor}>
                                  {getSetupProperties(setup.setup_type).icon}
                                  <span className="ml-1 capitalize">{setup.setup_type}</span>
                                </Badge>
                              ) : (
                                <span className="text-muted-foreground">None</span>
                              )}
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm">
                              {setup ? `$${setup.entry_price.toFixed(2)}` : '-'}
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm">
                              {setup ? `$${setup.target_price.toFixed(2)}` : '-'}
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm">
                              {setup ? `$${setup.stop_loss.toFixed(2)}` : '-'}
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm">
                              {setup ? setup.risk_reward_ratio.toFixed(2) : '-'}
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm">
                              {setup?.pcr !== undefined ? setup.pcr.toFixed(2) : '-'}
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm">
                              {setup?.rsi !== undefined ? setup.rsi.toFixed(1) : '-'}
                            </td>
                            {filters.includeGamma && (
                              <td className="px-6 py-4 whitespace-nowrap text-sm">
                                {setup?.gamma !== undefined ? setup.gamma.toFixed(4) : '-'}
                              </td>
                            )}
                            {filters.includeVanna && (
                              <td className="px-6 py-4 whitespace-nowrap text-sm">
                                {setup?.vanna !== undefined ? setup.vanna.toFixed(4) : '-'}
                              </td>
                            )}
                            {filters.includeCharm && (
                              <td className="px-6 py-4 whitespace-nowrap text-sm">
                                {setup?.charm !== undefined ? setup.charm.toFixed(4) : '-'}
                              </td>
                            )}
                            <td className="px-6 py-4 whitespace-nowrap text-sm">
                              {setup ? (
                                <div className="flex items-center gap-2">
                                  <div className="w-24 bg-gray-200 rounded-full h-2.5 dark:bg-gray-700 relative group">
                                    <div
                                      className={`h-2.5 rounded-full ${setup.strength >= 80 ? 'bg-green-500' : setup.strength >= 65 ? 'bg-yellow-500' : 'bg-red-500'}`}
                                      style={{ width: `${setup.strength}%` }}
                                    ></div>
                                    <div className="absolute inset-0 opacity-0 group-hover:opacity-100 transition-opacity duration-200 flex items-center justify-center">
                                      <span className="text-xs bg-black bg-opacity-70 text-white px-1 rounded">
                                        {setup.strength}%
                                      </span>
                                    </div>
                                  </div>
                                  <span className={`text-xs font-semibold ${
                                    setup.strength >= 80 ? 'text-green-600 dark:text-green-400' :
                                    setup.strength >= 65 ? 'text-yellow-600 dark:text-yellow-400' :
                                    'text-red-600 dark:text-red-400'
                                  }`}>
                                    {setup.strength >= 80 ? 'Strong' :
                                     setup.strength >= 65 ? 'Moderate' :
                                     'Weak'}
                                  </span>
                                </div>
                              ) : '-'}
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm">
                              {setup && (
                                <Button
                                  variant={isInWatchlist(ticker) ? "secondary" : "ghost"}
                                  size="icon"
                                  onClick={() => openWatchlistDialog(ticker, setup)}
                                  title={isInWatchlist(ticker)
                                    ? "Already in watchlist - click to update"
                                    : "Add to watchlist"}
                                  className={isInWatchlist(ticker) ? "bg-blue-100 dark:bg-blue-900" : ""}
                                  disabled={isAddingToWatchlist}
                                >
                                  {isInWatchlist(ticker)
                                    ? <CheckCircle2 className="h-4 w-4 text-blue-600 dark:text-blue-400" />
                                    : <BookmarkPlus className="h-4 w-4" />}
                                </Button>
                              )}
                            </td>
                          </tr>
                        ))}

                        {Object.keys(filteredResults).length === 0 && (
                          <tr>
                            <td
                              colSpan={10 +
                                (filters.includeGamma ? 1 : 0) +
                                (filters.includeVanna ? 1 : 0) +
                                (filters.includeCharm ? 1 : 0)
                              }
                              className="px-6 py-8 text-center text-muted-foreground"
                            >
                              No results found. Try running the scanner or adjusting your filters.
                            </td>
                          </tr>
                        )}
                      </tbody>
                    </table>
                  </div>
                </TabsContent>
              </Tabs>
            </CardContent>
          </Card>
        </div>

        <div className="space-y-6">
          <ScannerFilters
            onApplyFilters={applyFilters}
            isMockData={dataSource.includes('mock')}
          />

          <TickerLimitSettings
            defaultLimit={SCANNER_CONFIG.DEFAULT_TICKER_LIMIT}
            maxLimit={SCANNER_CONFIG.MAX_TICKER_LIMIT}
            onLimitChange={handleLimitChange}
            isLoading={isLoading}
          />
        </div>
      </div>

      {/* Watchlist Add Dialog */}
      <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>
        <DialogContent className="sm:max-w-md">
          <DialogHeader>
            <DialogTitle>Add to Watchlist</DialogTitle>
            <DialogDescription>
              {activeWatchlistItem && `Add ${activeWatchlistItem.ticker} to your watchlist for ${activeWatchlistItem.setup?.setup_type.toUpperCase()} setup.`}
            </DialogDescription>
          </DialogHeader>

          {activeWatchlistItem && activeWatchlistItem.setup && (
            <div className="grid gap-4 py-4">
              <div className="space-y-2 text-sm">
                <div className="flex justify-between">
                  <span className="text-muted-foreground">Entry:</span>
                  <span className="font-medium">${activeWatchlistItem.setup.entry_price.toFixed(2)}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-muted-foreground">Target:</span>
                  <span className="font-medium">${activeWatchlistItem.setup.target_price.toFixed(2)}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-muted-foreground">Stop Loss:</span>
                  <span className="font-medium">${activeWatchlistItem.setup.stop_loss.toFixed(2)}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-muted-foreground">Risk/Reward:</span>
                  <span className="font-medium">{activeWatchlistItem.setup.risk_reward_ratio.toFixed(2)}</span>
                </div>
              </div>

              <div className="grid gap-2">
                <Label htmlFor="watchlist-note">Add a note (optional)</Label>
                <Input
                  id="watchlist-note"
                  placeholder="e.g., Strong support at $142, watching for a breakout"
                  value={watchlistNote}
                  onChange={(e) => setWatchlistNote(e.target.value)}
                />
              </div>
            </div>
          )}

          <DialogFooter>
            <Button variant="outline" onClick={() => setDialogOpen(false)}>
              Cancel
            </Button>
            <Button onClick={handleAddToWatchlist} disabled={isAddingToWatchlist}>
              {isAddingToWatchlist ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  Adding...
                </>
              ) : (
                'Add to Watchlist'
              )}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
}